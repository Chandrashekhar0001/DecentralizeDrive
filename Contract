// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract upload{
    struct Access{
        address user;
        bool access;
    }

    mapping (address=>string[]) value;
    mapping (address=>mapping (address=>bool)) ownership;
    mapping (address=>Access[]) accesslist;
    mapping (address=>mapping (address=>bool)) previousdata;

    function add(address _user,string memory url) external {
        value[_user].push(url);
    }

    function allow(address user) external {
        ownership[msg.sender][user] = true;
        if(previousdata[msg.sender][user]){
            for(uint i=0;i<accesslist[msg.sender].length;i++){
                if(accesslist[msg.sender][i].user == user){
                    accesslist[msg.sender][i].access = true;
                }
            }
        }
        else{
            accesslist[msg.sender].push(Access(user,true));
            previousdata[msg.sender][user] = true;
        }
        
    }

    function disallow(address user) public {
        ownership[msg.sender][user] = false;
        for(uint i=0;i<accesslist[msg.sender].length;i++){
            if(accesslist[msg.sender][i].user == user){
                accesslist[msg.sender][i].access = false;
            }
        }
    }

    function display(address _user) external view returns (string[] memory){
        require(_user == msg.sender || ownership[_user][msg.sender],"dont have access");
        return value[_user];
    }

    function shareaccess()public view returns (Access[] memory){
        return accesslist[msg.sender];
    }
}
